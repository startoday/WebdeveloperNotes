1.API
application programming interface
interface for code/computers to talk to one another

IFTTT  connect APIs
programmableWeb -- search all kins of apis


2.when we use the internet, we make HTTP request and get HTML back.
API's don't respond with HTML, the structure information, API's respond with data, not structure
They use simpler data formats like XML and JSON (they are both format)

3. XML (extened markup language)
syntacticly similar to HTML, but it does not describe presentation like HTML does (strong, bold, stuff)
eg:
<person>
  <age>21</age>
  <name>King</name>
  <city>seattle</city>
</person>


4.JSON (javascript object notation)
JSON looks exactly like JS objects, but everything is a string
"key" :"val"
eg: (same infor as xml
{
"person" :{
    "age" : "21",
    "name" : "King",
    "city": "seattle"
    }
}

---a string !!! 不能直接 .sth 来提取  “{ sth } "
****
var parsedData = JSON.parse(body);  //an object
console.log(parsedData);
console.log(parsedData["query"]);
****


5. curl: to make request from the cmd line
make request of API use node
https://github.com/request/request

npm install request  //--not require


var request = require('request');
request('http://www.google.com', function (error, response, body) {
  if(error){
	  console.log("some error");
	  console.log(error);
  } else {
	  if(response.statusCode == 200) {
		 console.log(body); //things worked!
	  }
  }
});  //404 is also a status code, 200 :OK


/*
const request = require('request');
request('http://www.google.com', function (error, response, body) {
  console.error('error:', error); // Print the error if one occurred
  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  console.log('body:', body); // Print the HTML for the Google homepage.
});
*/




6.locus
npm i -D locus  (i:install, -D development dependencies)

ʆ: response.statusCode
200
ʆ: error
null


var request = require('request');
request('https://jsonplaceholder.typicode.com/users/1', function (error, response, body) {
	eval(require('locus'))  //freeze the body
		if(!error && response.statusCode == 200){ //hang up for the respond
			var parsedData = JSON.parse(body);  //an object
			console.log(parsedData);
			console.log(parsedData["name"]);
	  }
});  //404 is also a status code, 200 :OK

can also try request-promise (check the website and install it)

var request = require('request');
request('https://jsonplaceholder.typicode.com/users/1', function (error, response, body) {
	if(!error && response.statusCode == 200){ //hang up for the respond
		var parsedData = JSON.parse(body);  //an object
		console.log(parsedData);
		console.log(parsedData["name"]);
		console.log(parsedData.name + " lives in " + parsedData.address.city);
		//用 $ {} 这种，前后不是引号，是强调符号
		//console.log('${parsedData.name} lives in ${parsedData.address.city.street}');
  		console.log(`${parsedData.name} lives in ${parsedData.address.city}`);
	}
});  //404 is also a status code, 200 :OK



General search: http://www.omdbapi.com/?s=guardians+of+the+galaxy&apikey=thewdb 

Search with Movie ID: http://www.omdbapi.com/?i=tt3896198&apikey=thewdb 

So everything is exactly the same as Colt explains in the following videos, 
except you must append &apikey=thewdb to the end of your url.

Keep me posted with any questions.
