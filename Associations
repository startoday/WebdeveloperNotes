one to one 
author book

one to many
user  photos
campground comments

many to many
student courses


2.embedding data
one user --many post

//needs to define postSchema first, so compiler knows
var postSchema = new mongoose.Schema({
   title: String,
   content: String
});
var Post = mongoose.model("Post", postSchema);

// USER - email, name
var userSchema = new mongoose.Schema({
    email: String,
    name: String,
    posts: [postSchema]
});
var User = mongoose.model("User", userSchema);

//create new user
var newUser = new User({
    email: "hermione@hogwarts.edu",
    name: "Hermione Granger"
});

newUser.posts.push({
   title: "How to bre polyjuice potion",
   content: "Just kidding.  Go to potions class to learn it!"
});

newUser.save(function(err, user){
  if(err){
     console.log(err);
  } else {
     console.log(user);
  }
});

//find the user and add new
User.findOne({name: "Hermione Granger"}, function(err, user){
    if(err){
        // console.log(err);
    } else {
        user.posts.push({
            title: "3 Things I really hate",
            content: "Voldemort.  Voldemort. Voldemort"
        });
        user.save(function(err, user){
            if(err){
                console.log(err);
            } else {
                user.post.push({ //use push function
                  title: "2 things I really hate",
                  content: "Voldemort, and Voldermort!"
            });
            //again call back
            user.save(function(err,user){ // the user in call back is the refelect from mongoose
              if(err) {
                console.log(err);
              }else {
                console.log(user);
              }
        });
    }
});

3. object references
var userSchema = new mongoose.Schema({
	email: String,
	name: String
	post:[
		{
			type:mongoose.Schema.Types.ObjectId,
			ref:"Post"
		}
	]
});

Post.create({
  title: "How to cook the best burger pt. 4",
  content: "AKLSJDLAKSJD"
}, function(err, post){
    User.findOne({email: "bob@gmail.com"}, function(err, foundUser){
        if(err){
            console.log(err);
        } else {
            foundUser.posts.push(post); // post is from last function to generate
            foundUser.save(function(err, data){
                if(err){
                    console.log(err);
                } else {
                    console.log(data);
                }
            });
        }
    });
});

//how to find the user and then find all posts for that user
User.findOne({email: "bob@gmail.com"}).populate("posts").exec(function(err, user){ //the call back is from exec
    if(err){
        console.log(err);
     } else {
         console.log(user);
     }
});


4.Module.Exports
clean the modules
var Post= require("./models/post");
module.exports = mongoose.model("Post", postSchema);


