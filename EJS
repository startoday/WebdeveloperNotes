1.use res.render("name of page");   to render a html as a send back
res.render("dog.ejs");
//ejs stands for embedded javaScript
have to make another directory called "views" --only this name works

first npm install ejs --save
//create a new file:
views/result.ejs
---
res.render("result.ejs");
---
<%=   anything inside it will be treated as java script %>
--in ejs
<p>
	this is what you said : <%= thingVar %>
</p>

--in app.js
app.get("/repeat/:word",function(req, res){
	console.log(req.params);
	var word = req.params.word;
	res.render("result.ejs",{thingVar: word});  // you can have multiple pairs
});

******
<%= %> //what we have in between will be render into the html page
<%  logic %> //logic won't be show in the file

<% for(var i = 0;i < posts.length; i++) {  %>
  <li>
    <%= posts[i].title%>  - <strong> <%= posts[i].author %> </strong>
  </li>
<%> } <%>


2.dynamic html files -- templates
use link tage to link styles
<link rel = "stylesheet" href="app.css">  // usually folder called public and you don't need to type in the css folder name -- say it in .js
app.use(express.static("public")); // in js file, after  app = express()

app.set("view engine", "ejs"); //then you don't to include.ejs in the file name


3.post request  --body parser
app.post("/addfriend", function(req,res){
	res.send("you are at the post rount");
});


npm install body-parser --save

var bodyParser = require("body-parser");

app.use(bodyParser.urlencoded({extended: true}));


4. redirect to the old page

app.post("/addfriend", function(req,res){
	console.log(req.body);
	var newFriend = req.body.newFriend;
	friends.push(newFriend);
	//res.send("you are at the post rount");
	res.redirect("/friend");
});

<form action ="/addfriend" method="POST">
	<input type = "text" name= "newFriend" placeholder = "name">  //the name will be the variable name
	<button>
		 I made a new friend!
	</button>
</form>
