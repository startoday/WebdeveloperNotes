
0.option + cmd + j/i --> develop tools (such as js console)

1. five primitive data types
//Numbers -- don't care float or int or negative numvers 
4
9.3
-10
#math
1/3
0.3333333333333333
--remainder
10%3
1

//Strings  --- stuff inside " " 
"Hello World"
"43"
    //Single or Double quotes OK --but needs to match!
    "hello world"
    'hello world'

    //Concatenation -be in a one string
    "charlie" + "brown"  //"charliebrown"

    //Escape Characters start with "\"
    "Singin \"Do wah diddy, diddy, dum diddy do\" "
    "This is a backslash: \\"

    //Strings have a length property -- include all char(white space), no end '\n' stuff counted
    "hello world".length  //11

    //Access individual characters using [] and an index
    "hello"[0]  //"h"
    "hello"[4]  //"o"
 ##   5%3 (not 4!!!) -->2 
"hello".length % "hi\\".length

//Booleans
true
false

//null and undefined
null
undefined


2. right now just put ; at the end, later will talk about styles and conventions
//Variables are simply containers that store values
//They can store all of the values we've seen
var name = "Rusty";
var secretNumber = 73;
var isAdorable = true;
//Recall the stored value by calling the variable name
var name = "Rusty";
"hello there " + name    //"hello there Rusty"
var num = 37;
num + 3 + 10    //50
//We can change the stuff and type for var(dynamic type)
var name = "Robert";
name = "Bob";

#naming convenstion is camelCase

#The two other primitives are null and undefined

//undefined (just only declared)
var age
undefined

//null is "explicitly nothing"
var currentPlayer = "charlie";
currentPlayer = null;   //game over


3.built- in methods
//comments
clear(): clear the console
alert("some message")  # give you an annoying pop up!
console.log() #print sth to the console
prompt("give me some input") # ask input from user with a pop
    sayStuff = prompt("say");
    "hi"
    sayStuff
    "hi"

4. link JavaScript files to html:
put it in the <head>
<script src="script.js"></script>


5. boolean logic
assign x =5
(safer to use === somehow)
== : equal to
x === "5"  -- true

=== : equal value and type !
x === "5"  -- false

var y  = null
undefined
y == undefined
true
y === undefined
false

!==	Not equal value or equal type	
x !== "5"	
--true
x !== 5
--false

true == "1"          //true
0 == false           //true
null == undefined    //true
NaN == NaN           //false


&&, ||, ! ,short circuting also applies

truthy and falsy
!NaN true
!-1
false
!!-1
true

#falsy stuff!
false 
0
""
null
undefined
NaN 

6. conditionals
if ; else if; else
if(sth) {}
if(age % Math.sqrt(age) === 0) {
  console.log("Your age is a perfect square!");
}
prompt() will return a string
we need to cast it to use == sometime
Number(var) === 


7. loops
DRY: Don't Repeat Yourself
while(someCondition) {
  //run some code
}

var str = "hello";
var count = 0;    
while(count < str.length) {
 console.log(str[count]);
 count++;
}

    var str="hello world"
    str.indexOf("world"); --6
    str.indexOf("ye"); ---1


for(init; condition; step) {
  //run some code
}
for(var count = 0; count < 6; count++) {
  console.log(count);
}

8.functions
function doSomething() {
  console.log("HELLO WORLD");
}
doSomething(); //call it

function area(length, width) {
  console.log(length * width);
}
area(9,2); //18


##if no return, will return undefined

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
var city = "paris";              //"paris"
var capital = capitalize(city);  //"Paris"

function greet(person1, person2, person3){
  console.log("hi " + person1);
  console.log("hi " + person2);
  console.log("hi " + person3);
}
greet("Harry", "Ron", "Hermione")
//如果少传了一个， 不会报错，会hi undefind
greet("Harry", "Ron")
hi Harry
VM943:3 hi Ron
VM943:4 hi undefined

//function declaration
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

//function expression --这种如果你change了capitalize 这个function会丢失！
var capitalize = function(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
call : capitalize(str);

str.replace(/-/g, "newchar"); will return a new copy! not inplace~

setInterval(sing, 50) //例子是可以传另一个 function的。
486 //会return一个值让你stop
clearInterval(486); //传这个值才行
setInterval(function(){ define a function only use once -like lambda}, 50)

9.scope
scope is the context that code is executed in
when difine out side a function, the function can still use it (like a globle),
if you change the y, then it will also change the outside y
var ph = "hi"
function doSth(){
    ph = "good"
    console.log(ph)
}
doSth()--good
ph -- good



10. JS arrays
var friends = ["Charlie", "Liz", "David", "Mattias"];
friends[1] + " <3 " + friends[2]  //"Liz <3 David"
//we can update arrays
friends[0] = "Chuck"; // friends: (4) ["Chuck", "Liz", "David", "Mattias"]
//add new stuff
friends[5] = "Amelie";
friends //(6) ["Chuck", "Liz", "David", "Mattias", empty, "Amelie"]

//We can initialize an empty array two ways:
var friends = []; //no friends :(
var friends = new Array() //uncommon

//Arrays can hold any type of data
var random_collection = [49, true, "Hermione", null];

//Arrays have a length property
var nums = [45,37,89,24];
nums.length   //4


11.array method

push(): #add one at the very end
var colors = ["red", "orange", "yellow"];
colors.push("green");
//["red", "orange", "yellow", "green"]

pop() remove the last and can return the removed element
colors.pop();
//["red", "orange"]
//pop() returns the removed element
var col = colors.pop();  //orange

unshift() # add to the front of an array
shift() #remove the first
var colors = ["red", "orange", "yellow"];
colors.unshift("infrared")
//["infrared", "red", "orange", "yellow"]
var colors = ["red", "orange", "yellow"];
colors.shift();
//["orange", "yellow"]
//shift() also returns the removed element
var col = colors.shift();  //orange

indexOf() # return the first match index, if no match, return -1
var friends = ["Charlie", "Liz", "David", "Mattias", "Liz"];
//returns the first index at which a given element can be found
friends.indexOf("David"); //2
friends.indexOf("Liz"); //1, not 4
//returns -1 if the element is not present.
friends.indexOf("Hagrid"); //-1

slice() copy parts of an array, no argu : copy entire
var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
//use slice to copy the 2nd and 3d fruits
//specify index where the new array starts(1) and ends(3)
var citrus = fruits.slice(1, 3);
//this does not alter the original fruits array
//citrus contains ['Orange','Lemon']
//fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
//you can also use slice() to copy an entire array
var nums = [1,2,3];
var otherNums = nums.slice();
//both arrays are [1,2,3]


