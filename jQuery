1.what is jQuery? 
a DOM manipulation library, just like other library in other language
one of jQuery function : make HTTP requests(AJAX)
also like cross-browser support

2.CDN for jQuery
<script
  src="https://code.jquery.com/jquery-3.4.1.js"
  integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU="
  crossorigin="anonymous"></script>
  
3.use $() ti select
 $("img") -- return a list even if only one element
 $("#bouns") 
CSS selector ($ is a function)

.css(property, value)
$("h1").css("color", "yellow");
var styles = {
some set up
}
$("h1").css(style); (all things in style will be appied
-- also can select multiple elements at once 
if not jQuery, we need to use a var to store and use a loop with length to change it 

put the script in the head ( adding jQuery first) and also the script (like js) at end of body
//selectt the first div only and change the color to pink; remember the CSS selector we talked about before
$("div:first-of-type").css("color","pink");

4.some jQuery methods
text() #like the jQuery version of textContent in js (without tags)
$("h1").text("new text!")  // change h1 text to new text! (usually treat user input as text)

html() #get the html() -- the innerHtml (with tags)
$("h1").html("<li>new text!</li>")

attr() # get the value of an attribute for the first element in the set of matched elements 
# or set one or more attributes for every matched element (retrive/ set attribute)
$("img").attr("getter - old  attribute for updation", "setter -new trribute to update")
$("img").attr("width", "500px")
$("input").attr("type", "color")
--will change all stuff qualified --first - use : first-of-type
$("img").last().attr("width", "500px") //only change last

val() # get the current value of the first element in the set of matched elements or set the value of every matched element
--value() for js
$("input").val();
$("input").val("rustyle"); -- change it!
--when to use it? to clear/reset stuff like for the to do list
//if there is a drop down menu and you want to know what user select
$("selector") // select the select tag
$("selector").val(); --tell you what user select

addClass()
removeClass()
toggleClass() -- add it if not have, remove if have 

.correct{
color:green;
}
.wrong{
color:red;
}
.done{
text-xx:lineThrough;
}
$("p").addClass("correct") // can add multiple class same time
$("li").toggleClass("done"); -- all the lis will toggle


5.jQuery events

click()
$("button").click(function(){  // all buttons will change, not jQuery then you need a loop
alert("haha, someone click the button");
$(this).css("background","pink"); --pay attention to the "this" version in jQuery
});

keypress() # a way to add a keypress listener to elements, like .click() 
--triggered when user type sth in the key board// keydown(press a key), keyup(release a key) indicate which key is pressed, 
#keypress is more for what char is enter --shift+a -> keypress(A // the result) keydown(shift) maybe keyup(a)
$('input').keypress(function(){
alert("haha, you pressed a key");
});
$('input[type="text"]').keypress(function(){
alert("haha, text input");
});
--do thing depends on which key is pressed // "which" each key has a code
$('input').keypress(function(event){
  if(event.which ===13){
    alert("haha, you hit the enter");
  }
});


on() * important,used 99% of the time, worked similarly to addEventListener. 
#it lets you specify the type of event to listen for
$("button").on('click', function(){  --click is the event you specify here, basically, any event
alert("haha, someone click the button");
});

$('input').on('keypress', function(event){
  if(event.which ===13){
    alert("haha, you hit the enter");
  }
});

##one thing to remember use $(this) to use the js this! it need a js object
****why you need on()? the difference between on() and click()?
click()only adds listeners for existing elements
on()will add listeners for all potential future elements -- such as a to do list, you click a mouse to triggle to have new things

6. jQuery effects
.fadeOut(duration, completed call back -- a function, eg the next example ,if remove is out the function(){} it is immediately gone)
--just hiding them, not delete, with that remove, will delete

$("button").on("click", function(){
 $('div').slideToggle(1000, function(){
 	$(this).remove(); --- so this one will only run after the fade out finished!, the stuff is gone from the remove function
 });
});

.fadeToggle() depends on current status

.slideDown() --like PPT's slideDown

7.folder structure
lib for extend codes in js folder (asset - js, css  | html)

$("li").on("click", function(){
	// $(this).css("color","red");
	// $(this).css("text-decoration","line-through");
	//change the color back
	if($(this).css("color") === "rgb(255, 0, 0)"){
		$(this).css({
		color:"black", // comma in between
		// text-decoration:"line-through" //Unexpected token - not use this 
		textDecoration:"none" // have to use camelCase
	});
	}
	else {
		$(this).css({
		color:"Red", // comma in between
		// text-decoration:"line-through" //Unexpected token - not use this 
		textDecoration:"line-through" // have to use camelCase
	});
	}
})

-- change it into $(this).toggleClass("completed");
